@page "/Students"
@using Common.Enums

<PageTitle>Students</PageTitle>

<div class="flex justify-end mb-3">
    @if (ImportedCount > 0)
    {
        <MudText Typo="Typo.h3" Class="mr-5">Imported Count : @ImportedCount</MudText>
    }
    <MudFab Color="Color.Warning" StartIcon="@Icons.Material.Filled.Download" OnClick="DownloadData" />
</div>
<MudDataGrid T="UserEntity" Items="@gridData" RowsPerPage="25"
             QuickFilter="new Func<UserEntity, bool>(gridFilter.FilterData)" @bind-model="model">
    <ToolBarContent>
        <MudTextField Variant="Variant.Outlined" @bind-Value="gridFilter.filterKey" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <TemplateColumn CellClass="w-[80px]" Filterable="false">
            <CellTemplate>
                <MudImage Src="@context.Item.ImageUrl" Width="80"></MudImage>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.UserCode" Title="Code" />
        <PropertyColumn Property="x => x.FullName" Title="Name" />
        <PropertyColumn Property="x => x.DivisionName" Title="Division" />
        <PropertyColumn Property="x => x.Class" Title="Class" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="UserEntity" />
    </PagerContent>
</MudDataGrid>

<MudOverlay ZIndex="10000" Visible="isLoading" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>
@code {
    bool isLoading = true;
    public async Task ShowLoading()
    {
        isLoading = true;
        await Task.Delay(100);
        StateHasChanged();
    }
    public async Task HideLoading()
    {
        isLoading = false;
        await Task.Delay(100);
        StateHasChanged();
    }
}

@code {
    public int UserTypeId { get; set; } = (int)UserTypeEnum.Student;

    IEnumerable<UserEntity>? gridData = new List<UserEntity>();
    UserEntity model = new();
    int ImportedCount = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FillGrid();

            await HideLoading();

            StateHasChanged();
        }
    }

    public string CreateFolderInWwwroot(string folderName)
    {
        var wwwrootPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot");
        var targetFolder = Path.Combine(wwwrootPath, folderName);

        if (!Directory.Exists(targetFolder))
        {
            Directory.CreateDirectory(targetFolder);
        }

        return targetFolder;
    }
    async Task FillGrid()
    {
        gridData = await _userService.GetAll(UserTypeId);
    }
    async Task DownloadData()
    {
        bool confirmed = await jScript.Confirm("Are you sure?");
        if (!confirmed)
        {
            return;
        }

        ImportedCount = 0;

        await ShowLoading();

        try
        {
            var photoPath = CreateFolderInWwwroot("Photos");
            var imagesPath = Path.Combine(photoPath, "StudentImages");

            var studentPath = Path.Combine("Photos", "StudentImages");
            var parentPath = Path.Combine("Photos", "ParentImages");

            _schoolIntegrationService.DownloadImages(photoPath, imagesPath);

            var schoolData = _schoolIntegrationService.GetSchoolData();

            foreach (var pupil in schoolData.Pupils)
            {
                var entityPupil = new UserEntity
                {
                    UserTypeId = (int)UserTypeEnum.Student,

                    UserCode = pupil.SchoolId,
                    Title = pupil.Title,
                    FullName = $"{pupil.Fullname}",
                    DivisionName = pupil.DivisionName,
                    Class = pupil.Form,
                    ImageUrl = Path.Combine(studentPath, $"{pupil.Id}.png"),
                    Dob = pupil.DOB,
                    FamilyId = pupil.FamilyId,
                    Phone = pupil.MobileNumber,
                    Email = pupil.EmailAddress,
                    ReferenceId = pupil.Id.ToString(),
                };
                await _userService.SaveUser(entityPupil);
                ImportedCount++;

                StateHasChanged();
            }

            foreach (var parent in schoolData.Contacts)
            {
                var entityParent = new UserEntity
                {
                    UserTypeId = (int)UserTypeEnum.Parent,
                    FullName = $"{parent.Forename} {parent.MiddleNames} {parent.Surname}",
                    Title = parent.Title,
                    Relationship = parent.Relationship,
                    Country = parent.Country,
                    ReferenceId = parent.Id.ToString(),
                    Childs = string.Join(",", parent.PupilIds.OrderBy(x => x))
                };
                await _userService.SaveUser(entityParent);
                ImportedCount++;

                StateHasChanged();
            }

            toast.Add("Users Imported Successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            toast.Add(ex.Message, Severity.Error);
            await HideLoading();
            return;
        }

        await FillGrid();
        await HideLoading();
        StateHasChanged();
    }
}